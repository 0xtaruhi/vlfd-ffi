use std::path::Path;

fn main() {
    // Regenerate header only when relevant inputs change.
    println!("cargo:rerun-if-changed=src/lib.rs");

    let crate_dir = std::env::var("CARGO_MANIFEST_DIR").expect("CARGO_MANIFEST_DIR not set");
    let out_dir = std::env::var("OUT_DIR").expect("OUT_DIR not set");
    let header_path = Path::new(&out_dir).join("vlfd_ffi.h");

    if Path::new("cbindgen.toml").exists() {
        println!("cargo:rerun-if-changed=cbindgen.toml");
    }

    let config = cbindgen::Config {
        language: cbindgen::Language::C,
        usize_is_size_t: true,
        cpp_compat: true,
        no_includes: false,
        header: Some(String::from("// Auto-generated by cbindgen. Do not edit.")),
        include_guard: Some(String::from("CBINDGEN__VLFD_FFI_H")),
        ..Default::default()
    };

    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_config(config)
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(&header_path);

    // Make OUT_DIR available to build scripts of dependent crates for includes.
    println!("cargo:include={}", out_dir);
}
